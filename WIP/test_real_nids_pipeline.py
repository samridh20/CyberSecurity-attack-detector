#!/usr/bin/env python3
"""
Test the REAL NIDS ML Pipeline - No signature matching, pure ML detection
"""

import time
import sys
from pathlib import Path

# Add backend to path
sys.path.insert(0, str(Path("backend").absolute()))

from nids import RealTimeNIDS

def test_real_ml_pipeline():
    """Test the actual NIDS ML pipeline"""
    print("🧠 Testing REAL ML-Based NIDS Pipeline")
    print("=" * 50)
    print("This uses your actual machine learning models, not signatures!")
    
    config_path = "backend/config.yaml"
    if not Path(config_path).exists():
        print(f"❌ Config file not found: {config_path}")
        return False
    
    try:
        # Initialize the REAL NIDS system
        print("📋 Initializing REAL NIDS with ML models...")
        nids = RealTimeNIDS(config_path)
        
        print(f"✅ NIDS initialized:")
        print(f"   📡 Capture: {type(nids.capture).__name__}")
        print(f"   🧠 Model: {type(nids.model_adapter).__name__}")
        print(f"   🚨 Alerts: {type(nids.alert_manager).__name__}")
        
        # Start the REAL detection system
        print("\n🚀 Starting REAL ML-based detection...")
        nids.start_detection()
        
        print("✅ Real NIDS is now running!")
        print("💡 Now run: python comprehensive_attack.py 127.0.0.1")
        print("🧠 The ML models will analyze packets and detect attacks")
        print("📊 Check backend API for real ML-generated alerts")
        
        # Monitor for 2 minutes
        print(f"\n⏱️  Monitoring with ML models for 120 seconds...")
        
        for i in range(24):  # 24 * 5 = 120 seconds
            time.sleep(5)
            
            # Get real stats from NIDS
            status = nids.get_status()
            
            print(f"   📊 ML Processing: {status['packets_processed']} packets, "
                  f"{status['alerts_generated']} ML alerts, "
                  f"{status['active_flows']} flows")
            
            # Check for ML-generated alerts
            if nids.alert_manager:
                ml_alerts = nids.alert_manager.get_recent_alerts(5)
                if ml_alerts:
                    print(f"   🧠 ML Alerts: {len(ml_alerts)} detected by models")
                    for alert in ml_alerts[-2:]:  # Show last 2
                        print(f"      - ML detected: {alert.get('attack_type', 'Unknown')}")
        
        # Stop the real system
        print("\n🛑 Stopping REAL NIDS...")
        nids.stop_detection()
        
        # Final ML results
        final_status = nids.get_status()
        print(f"\n🧠 Final ML Results:")
        print(f"   Packets processed by ML: {final_status['packets_processed']}")
        print(f"   Alerts generated by ML: {final_status['alerts_generated']}")
        
        if final_status['packets_processed'] == 0:
            print("\n❌ PROBLEM: No packets processed by ML models!")
            print("   - Check packet capture permissions (run as admin)")
            print("   - Verify network interface is correct")
            print("   - Ensure attack traffic reaches the interface")
            return False
        
        elif final_status['alerts_generated'] == 0:
            print("\n⚠️  PROBLEM: ML processed packets but generated no alerts!")
            print("   - ML models may need lower thresholds")
            print("   - Attack patterns may not match training data")
            print("   - Check model sensitivity settings")
            return False
        
        else:
            print("\n🎉 SUCCESS: ML models are detecting attacks!")
            return True
    
    except Exception as e:
        print(f"❌ REAL NIDS failed: {e}")
        return False

def main():
    """Main function"""
    print("🕷️  REAL ML-Based NIDS Test")
    print("=" * 40)
    print("This tests your ACTUAL machine learning pipeline")
    print("No signature matching - pure ML detection!")
    print()
    
    success = test_real_ml_pipeline()
    
    if success:
        print("\n✅ Your ML-based NIDS is working!")
        print("🎯 The machine learning models are detecting attacks")
    else:
        print("\n❌ ML-based NIDS needs debugging")
        print("💡 Check packet capture and model thresholds")

if __name__ == "__main__":
    main()