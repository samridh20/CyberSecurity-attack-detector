#!/usr/bin/env python3
"""
Debug ML Pipeline - See what's happening in the real ML detection
"""

import time
import sys
from pathlib import Path

# Add backend to path
sys.path.insert(0, str(Path("backend").absolute()))

from nids import RealTimeNIDS

def debug_ml_pipeline():
    """Debug the real ML pipeline step by step"""
    print("üß† Debugging REAL ML Pipeline")
    print("=" * 40)
    
    config_path = "backend/config.yaml"
    
    try:
        # Initialize NIDS
        print("üìã Initializing NIDS...")
        nids = RealTimeNIDS(config_path)
        
        # Check model thresholds
        if nids.model_adapter:
            print(f"üéØ Model threshold: {nids.model_adapter.binary_threshold}")
            if hasattr(nids.model_adapter, 'set_threshold'):
                # Lower threshold for more sensitive detection
                nids.model_adapter.set_threshold(0.3)
                print(f"üîß Lowered threshold to: 0.3")
        
        # Check alert manager settings
        if nids.alert_manager:
            print(f"üö® Alert min confidence: {nids.alert_manager.min_confidence}")
            print(f"‚è±Ô∏è  Alert cooldown: {nids.alert_manager.cooldown_seconds}s")
            
            # Lower alert thresholds
            nids.alert_manager.min_confidence = 0.2
            nids.alert_manager.cooldown_seconds = 5
            print(f"üîß Lowered alert confidence to: 0.2")
            print(f"üîß Reduced cooldown to: 5s")
        
        # Start detection
        print("\nüöÄ Starting ML detection...")
        nids.start_detection()
        
        print("‚úÖ ML pipeline active!")
        print("üí° Now run: python comprehensive_attack.py 127.0.0.1")
        print("üîç Monitoring ML processing...")
        
        # Monitor ML processing in detail
        last_packets = 0
        last_alerts = 0
        
        for i in range(60):  # Monitor for 5 minutes
            time.sleep(5)
            
            status = nids.get_status()
            packets = status['packets_processed']
            alerts = status['alerts_generated']
            flows = status['active_flows']
            
            # Check for new activity
            new_packets = packets - last_packets
            new_alerts = alerts - last_alerts
            
            print(f"üìä ML Status: {packets} packets (+{new_packets}), {alerts} alerts (+{new_alerts}), {flows} flows")
            
            # Check recent alerts from ML
            if nids.alert_manager and hasattr(nids.alert_manager, '_recent_alerts'):
                recent_ml_alerts = nids.alert_manager._recent_alerts
                if recent_ml_alerts:
                    print(f"üß† ML Alerts in memory: {len(recent_ml_alerts)}")
                    
                    # Show latest ML alert
                    latest = recent_ml_alerts[0]
                    print(f"   Latest ML: {latest.get('attack_type', 'Unknown')} at {latest.get('timestamp', 0)}")
            
            # If no new packets, there's a capture issue
            if new_packets == 0 and i > 2:
                print("‚ö†Ô∏è  No new packets - packet capture may not be working")
                print("   - Check if comprehensive_attack.py is running")
                print("   - Verify network interface is correct")
                print("   - Ensure admin privileges for packet capture")
            
            # If packets but no alerts, model isn't detecting
            elif new_packets > 0 and new_alerts == 0 and i > 2:
                print("‚ö†Ô∏è  Packets processed but no ML alerts generated")
                print("   - ML models may not be detecting attack patterns")
                print("   - Thresholds may be too high")
                print("   - Attack patterns may not match training data")
            
            last_packets = packets
            last_alerts = alerts
        
        # Stop detection
        nids.stop_detection()
        
        # Final analysis
        final_status = nids.get_status()
        print(f"\nüß† Final ML Results:")
        print(f"   Total packets processed by ML: {final_status['packets_processed']}")
        print(f"   Total alerts generated by ML: {final_status['alerts_generated']}")
        
        if final_status['packets_processed'] == 0:
            print("\n‚ùå ROOT CAUSE: No packets captured!")
            print("   Solutions:")
            print("   - Run as administrator")
            print("   - Check network interface in config.yaml")
            print("   - Verify comprehensive_attack.py is sending to correct IP")
        
        elif final_status['alerts_generated'] <= 1:
            print("\n‚ùå ROOT CAUSE: ML models not detecting attacks!")
            print("   Solutions:")
            print("   - Lower model detection threshold")
            print("   - Check if attack patterns match training data")
            print("   - Verify feature extraction is working")
        
        else:
            print("\n‚úÖ ML pipeline working correctly!")
    
    except Exception as e:
        print(f"‚ùå ML pipeline debug failed: {e}")

if __name__ == "__main__":
    debug_ml_pipeline()